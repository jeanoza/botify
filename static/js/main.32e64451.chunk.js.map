{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","axios","create","baseURL","App","useState","neoDataArray","setNeoDataArray","selectedArray","setSelectedArray","isBarChart","setIsBarChart","useEffect","get","then","response","near_earth_objects","data","buttonHandle","event","outerText","target","selected","filter","neoData","name","close_approach_data","epoch_date_close_approach","Date","now","reverse","orbiting_body","Dropdown","Toggle","variant","id","Menu","Item","onClick","prev","style","display","maxWidth","width","height","chartType","loader","sort","a","b","estimated_diameter","kilometers","estimated_diameter_min","map","max","estimated_diameter_max","min","slice","indexOf","options","chartArea","hAxis","title","minValue","vAxis","legend","position","legendToggle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAMMA,EAAMC,IAAMC,OAAO,CACvBC,QACE,iGAyGWC,MAtGf,WAAgB,IAAD,EAC2BC,mBAAS,IADpC,mBACNC,EADM,KACQC,EADR,OAE6BF,mBAAS,IAFtC,mBAENG,EAFM,KAESC,EAFT,OAGuBJ,oBAAS,GAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAQbC,qBAAU,WACRZ,EAAIa,MAAMC,MAAK,SAACC,GAAc,IAElBC,EACND,EADFE,KAAQD,mBAEVT,EAAgBS,GAChBP,EAAiBO,QAElB,IAMH,IAIME,EAAe,SAACC,GAAW,IAEnBC,EACRD,EADFE,OAAUD,UAENE,EAAWhB,EAAaiB,QAAO,SAACC,GAAD,OARbC,EASFL,EAATI,EARRE,oBACFH,QAAO,SAACN,GAAD,OAAUA,EAAKU,0BAA4BC,KAAKC,SACvDC,UAAU,GAAGC,gBAAkBN,EAHjB,IAAOA,KAWxBhB,EAAiBa,IAKnB,OACE,qCACE,eAACU,EAAA,EAAD,WACE,cAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,iBAAtC,2BAGA,eAACH,EAAA,EAASI,KAAV,WACE,cAACJ,EAAA,EAASK,KAAV,CAAeC,QAASpB,EAAxB,mBACA,cAACc,EAAA,EAASK,KAAV,CAAeC,QAASpB,EAAxB,mBACA,cAACc,EAAA,EAASK,KAAV,CAAeC,QAASpB,EAAxB,kBACA,cAACc,EAAA,EAASK,KAAV,CAAeC,QAASpB,EAAxB,wBAGJ,wBAAQoB,QAhBG,WACb3B,GAAc,SAAC4B,GAAD,OAAWA,MAevB,SACG7B,EAAa,WAAa,iBAE7B,qBAAK8B,MAAO,CAAEC,QAAS,OAAQC,SAAU,KAAzC,SACE,cAAC,IAAD,CACEC,MAAO,IACPC,OAAQ,IAERC,UAAWnC,EAAa,WAAa,QACrCoC,OAAQ,gDACR7B,KAAI,CACF,CACE,WACA,6BACA,2BAJA,mBAMCT,EACAuC,MACC,SAACC,EAAGC,GAAJ,OACEA,EAAEC,mBAAmBC,WAAWC,uBAChCJ,EAAEE,mBAAmBC,WAAWC,0BAEnCC,KAAI,SAAC7B,GACJ,IAAMW,EAAKX,EAAQW,GACbV,EAAOD,EAAQC,KACf6B,EACJ9B,EAAQ0B,mBAAmBC,WAAWI,uBAClCC,EACJhC,EAAQ0B,mBAAmBC,WAAWC,uBAExC,MAAO,CAAC,GAAD,OAAIjB,EAAJ,YAAUV,EAAKgC,MAAMhC,EAAKiC,QAAQ,OAASF,EAAKF,QAG7DK,QAAS,CACPC,UAAW,CAAEjB,MAAO,OACpBkB,MAAO,CACLC,MAAO,6BACPC,SAAU,GAEZC,MAAO,CACLF,MAAO,YAETG,OAAQ,CAAEC,SAAU,QAEtBC,cAAY,UC9FPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxD,MAAK,YAAkD,IAA/CyD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.32e64451.chunk.js","sourcesContent":["import { Chart } from \"react-google-charts\";\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst api = axios.create({\n  baseURL:\n    \"https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=SwPLIlNJuecT8HvelwbeyVBqq9uJAdfyClVjQLeM\",\n});\n\nfunction App() {\n  const [neoDataArray, setNeoDataArray] = useState([]);\n  const [selectedArray, setSelectedArray] = useState([]);\n  const [isBarChart, setIsBarChart] = useState(true);\n  /**\n   * for select a data : Earth, Juptr, Mars, Merc\n   * I use neoDataArray for origin data, selectedArray for data which change by user click\n   */\n  useEffect(() => {\n    api.get().then((response) => {\n      const {\n        data: { near_earth_objects },\n      } = response;\n      setNeoDataArray(near_earth_objects);\n      setSelectedArray(near_earth_objects);\n    });\n  }, []);\n\n  /**\n   * 1/ find close approach array by current time\n   * 2/ find a lastest orbiting_body\n   */\n  const nameFilter = (data, name) =>\n    data.close_approach_data\n      .filter((data) => data.epoch_date_close_approach < Date.now())\n      .reverse()[0].orbiting_body === name;\n  const buttonHandle = (event) => {\n    const {\n      target: { outerText },\n    } = event;\n    const selected = neoDataArray.filter((neoData) =>\n      nameFilter(neoData, outerText)\n    );\n    setSelectedArray(selected);\n  };\n  const toggle = () => {\n    setIsBarChart((prev) => !prev);\n  };\n  return (\n    <>\n      <Dropdown>\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n          Orbiting Body\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item onClick={buttonHandle}>Earth</Dropdown.Item>\n          <Dropdown.Item onClick={buttonHandle}>Juptr</Dropdown.Item>\n          <Dropdown.Item onClick={buttonHandle}>Mars</Dropdown.Item>\n          <Dropdown.Item onClick={buttonHandle}>Merc</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      <button onClick={toggle}>\n        {isBarChart ? \"To Table\" : \"To Bar Chart\"}\n      </button>\n      <div style={{ display: \"flex\", maxWidth: 900 }}>\n        <Chart\n          width={900}\n          height={900}\n          // chartType=\"BarChart\"\n          chartType={isBarChart ? \"BarChart\" : \"Table\"}\n          loader={<div>Loading Chart</div>}\n          data={[\n            [\n              \"NEO Name\",\n              \"Min Estimated Diameter(km)\",\n              \"Max Estimated Diameter\",\n            ],\n            ...selectedArray\n              .sort(\n                (a, b) =>\n                  b.estimated_diameter.kilometers.estimated_diameter_min -\n                  a.estimated_diameter.kilometers.estimated_diameter_min\n              )\n              .map((neoData) => {\n                const id = neoData.id;\n                const name = neoData.name;\n                const max =\n                  neoData.estimated_diameter.kilometers.estimated_diameter_max;\n                const min =\n                  neoData.estimated_diameter.kilometers.estimated_diameter_min;\n\n                return [`${id} ${name.slice(name.indexOf(\"(\"))}`, min, max];\n              }),\n          ]}\n          options={{\n            chartArea: { width: \"50%\" },\n            hAxis: {\n              title: \"Min Estimated Diameter(km)\",\n              minValue: 0,\n            },\n            vAxis: {\n              title: \"NEO Name\",\n            },\n            legend: { position: \"top\" },\n          }}\n          legendToggle\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}